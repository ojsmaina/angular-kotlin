package com.munyu.wamis.domainimport java.util.regex.Patternimport javax.persistence.*@Entitydata class Connection(        @Column(nullable = false)        val meterSerialNumber: String,        @Column(nullable = false,columnDefinition = "TEXT")        val meterLocation: String) : AbstractAuditableEntity(){    @Column(nullable = false)    var connectionCode: String = ""    @Enumerated(EnumType.STRING)    @Column(nullable = true)    var status: ConnectionStatus? = null    @ManyToOne    @JoinColumn(name = "customer_id")    var customer: Customer? = null  //  private val CODE_PATTERN = Pattern.compile("([A-Za-z]+)(\\d+)")    init {        this.connectionCode = generateConnectionCode()        this.status = ConnectionStatus.INITIAL    }    constructor(serial: String,location: String,status: ConnectionStatus,code: String,customer: Customer ): this(serial,location){        this.status = status        this.customer = customer    }    fun generateConnectionCode(): String{        return (0..9).shuffled().subList(3,6).toString()    } /*   internal fun generateCode(connection: Connection, defaultCode): String {        val strings = getLastConnectionCodeUsed(connection)        strings.remove(null)        if (lastCode != null) {            val matcher = CODE_PATTERN.matcher(lastCode!!)            if (matcher.matches()) {                val lastSequence = Integer.parseInt(matcher.group(2))                return String.format("%s%04d", connectionCode, lastSequence + 1)            }        }        return defaultCode + "0001"    }*/}
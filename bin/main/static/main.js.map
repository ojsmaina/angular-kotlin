{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/bills/bills.component.css","webpack:///./src/app/bills/bills.component.html","webpack:///./src/app/bills/bills.component.ts","webpack:///./src/app/connections/connection/connection.component.css","webpack:///./src/app/connections/connection/connection.component.html","webpack:///./src/app/connections/connection/connection.component.ts","webpack:///./src/app/connections/connections-list/connections-list.component.css","webpack:///./src/app/connections/connections-list/connections-list.component.html","webpack:///./src/app/connections/connections-list/connections-list.component.ts","webpack:///./src/app/connections/connections.component.css","webpack:///./src/app/connections/connections.component.html","webpack:///./src/app/connections/connections.component.ts","webpack:///./src/app/core/material.module.ts","webpack:///./src/app/customers/customer-stepper/customer-stepper.component.css","webpack:///./src/app/customers/customer-stepper/customer-stepper.component.html","webpack:///./src/app/customers/customer-stepper/customer-stepper.component.ts","webpack:///./src/app/customers/customers-list/customers-list.component.css","webpack:///./src/app/customers/customers-list/customers-list.component.html","webpack:///./src/app/customers/customers-list/customers-list.component.ts","webpack:///./src/app/customers/customers.component.css","webpack:///./src/app/customers/customers.component.html","webpack:///./src/app/customers/customers.component.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/navigation/navigation.component.css","webpack:///./src/app/navigation/navigation.component.html","webpack:///./src/app/navigation/navigation.component.ts","webpack:///./src/app/reports/reports.component.css","webpack:///./src/app/reports/reports.component.html","webpack:///./src/app/reports/reports.component.ts","webpack:///./src/app/services/billing.service.ts","webpack:///./src/app/services/connection.service.ts","webpack:///./src/app/services/customer.service.ts","webpack:///./src/app/services/user.service.ts","webpack:///./src/app/users/user/user.component.css","webpack:///./src/app/users/user/user.component.html","webpack:///./src/app/users/user/user.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {BillsComponent} from './bills/bills.component';\nimport {ConnectionComponent} from './connections/connection/connection.component';\nimport {ConnectionsListComponent} from './connections/connections-list/connections-list.component';\nimport {ConnectionsComponent} from './connections/connections.component';\nimport {CustomerStepperComponent} from './customers/customer-stepper/customer-stepper.component';\nimport {CustomersListComponent} from './customers/customers-list/customers-list.component';\nimport {CustomersComponent} from './customers/customers.component';\nimport {DashboardComponent} from './dashboard/dashboard.component';\nimport {ReportsComponent} from './reports/reports.component';\nimport {UserComponent} from './users/user/user.component';\n\nconst appRoutes: Routes = [\n  {path: \"\", redirectTo : \"/dashboard\", pathMatch: 'full'},\n  {path: \"dashboard\", component : DashboardComponent},\n  {path: \"customers\", component : CustomersComponent,\n    children : [\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\n      { path: \"list\", component: CustomersListComponent },\n      { path: \"add\", component: CustomerStepperComponent }\n    ]\n  },\n  {path: \"connections\", component : ConnectionsComponent,\n    children : [\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\n      { path: \"list\", component: ConnectionsListComponent },\n      { path: \"add-connection\", component: ConnectionComponent }\n    ]\n\n  },\n  {path: \"bills\", component : BillsComponent },\n  {path: \"reports\", component : ReportsComponent },\n  {path: \"users\", component : UserComponent }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(\n    appRoutes,\n    { useHash: true }\n  )],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule {}\nexport const routingComponents = [DashboardComponent,CustomersComponent,ConnectionsComponent,BillsComponent,ReportsComponent];\n\n","module.exports = \"\"","module.exports = \"<app-navigation></app-navigation>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Wamis!';\n  version = '1.0';\n  result = '';\n\n  constructor(){\n  }\n}\n","import { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule,routingComponents } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { CustomMaterialModule } from './core/material.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ConnectionsComponent } from './connections/connections.component';\nimport { CustomersComponent } from './customers/customers.component';\nimport { ReportsComponent } from './reports/reports.component';\nimport { NavigationComponent } from './navigation/navigation.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CustomersListComponent } from './customers/customers-list/customers-list.component';\n\nimport { CustomerService } from './services/customer.service';\nimport { UserComponent } from './users/user/user.component';\nimport { CustomerStepperComponent } from './customers/customer-stepper/customer-stepper.component';\nimport { ConnectionComponent } from './connections/connection/connection.component';\nimport { ConnectionsListComponent } from './connections/connections-list/connections-list.component';\nimport { BillsComponent } from './bills/bills.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    routingComponents,\n    ConnectionsComponent,\n    CustomersComponent,\n    ReportsComponent,\n    NavigationComponent,\n    DashboardComponent,\n    CustomersListComponent,\n    UserComponent,\n    CustomerStepperComponent,\n    ConnectionComponent,\n    ConnectionsListComponent,\n    BillsComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    CustomMaterialModule,\n    LayoutModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [CustomerService],\n  bootstrap: [AppComponent]\n})\n\nexport class AppModule { }\n","module.exports = \".search-control > input,\\n.search-control > button {\\n  font-size: 1.2rem;\\n}\\n\\n.search-control > input{\\n  width: 100%;\\n}\\n\\n.filter-wrapper,\\n.keyword-wrapper {\\n  display: flex;\\n  margin: 7px 20px 5px 0px;\\n}\\n\\n.filter-wrapper {\\n  min-height: 2%;\\n  flex-flow: column wrap;;\\n  position: relative\\n}\\n\\n.keyword-wrapper {\\n  width: 100%;\\n  position: relative;\\n}\\n\\n#keyword {\\n  border: 1px solid #ccc;\\n  padding: 10px;\\n  font: 1.5em 'Arimo', sans-serif;\\n  width: 100%;\\n  outline: none;\\n  transition: border 0.5s ease-in-out;\\n  border-color : rgba(81, 203, 238, 1);\\n}\\n\\n#keyword:focus {\\n  /*border-color : rgba(81, 203, 238, 1);;*/\\n}\\n\\n#keyword-button {\\n  position: absolute;\\n  right: 26%;\\n  top: 50%;\\n  -webkit-transform: translateY(-50%);\\n          transform: translateY(-50%);\\n  font-size: 1.7em;\\n  color: #8DB9ED\\n}\\n\\n#keyword-button:hover {\\n  color: #ccc\\n}\\n\\n.filter-select {\\n  width: 20%;\\n  list-style: square;\\n  font-size: 1.1em;\\n  color: rgb(105, 105, 105);\\n  border: 1px solid #ccc;\\n  border-top: none;\\n  top: calc(50% + 25px);\\n  overflow-y: auto;\\n  background: #fff;\\n  margin: 2px 20px 20px 0px;\\n}\\n\\n.tags {\\n  font-size: 12px;\\n  font-style: italic;\\n  color: #c6c6c6;\\n  margin-right: 10px;\\n  position: relative;\\n  top: -10px;\\n}\\n\\n.filter-select-list:hover .tags {\\n  color: #fff;\\n}\\n\\n.filter-select-list {\\n  cursor: pointer;\\n  padding: 5px 10px;\\n}\\n\\n.customer-name {\\n  display: inline-block;\\n  position: absolute;\\n}\\n\\n.filter-select-list:hover {\\n  background:  #C0C0C0;\\n  color: #fff\\n}\\n\\n.list-highlight,\\n.list-highlight:hover {\\n  background: rgb(55, 55, 55);\\n  color: #fff\\n}\\n\\n.selected {\\n  background-color: #CFD8DC !important;\\n  color: white;\\n}\\n\\n.connections li {\\n  cursor: pointer;\\n  position: relative;\\n  left: 0;\\n  background-color:#CFD8DC !important;\\n  margin: .5em;\\n  padding: .3em 0;\\n  height: 1.6em;\\n  border-radius: 4px;\\n}\\n\\n.connections .badge {\\n  display: inline-block;\\n  font-size: small;\\n  color: white;\\n  padding: 0.8em 0.7em 0 0.7em;\\n  background-color: #607D8B;\\n  line-height: 1em;\\n  position: relative;\\n  left: -1px;\\n  top: -4px;\\n  height: 1.8em;\\n  margin-right: .8em;\\n  border-radius: 4px 0 0 4px;\\n}\\n\\n.billing-form{\\n padding: 20px;\\n}\\n\\n.submit-btn{\\n  margin: 20px;\\n}\\n\\n.customer-connections-list{\\n  margin: 5px;\\n  padding: 5px;\\n}\\n\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\">\\n    <section class=\\\"filter-wrapper\\\">\\n      <div class=\\\"keyword-wrapper\\\">\\n          <input type=\\\"text\\\" [formControl]=\\\"customerQueryField\\\" id=\\\"keyword\\\" placeholder=\\\"search for a customer...\\\" autofocus />\\n      </div>\\n    </section>\\n\\n    <mat-list>\\n      <mat-list-item class=\\\"customer-connections-list\\\" *ngFor=\\\"let connection of customerConnections\\\" [class.selected]=\\\"connection === connection\\\"\\n                     (click)=\\\"onSelect(connection)\\\">\\n        <span class=\\\"badge\\\">{{connection.id}}</span>{{connection.meterSerialNumber}} in  {{connection.meterLocation}}\\n      </mat-list-item>\\n\\n    </mat-list>\\n</div>\\n  <div class=\\\"col-sm-8\\\" *ngIf=\\\"connectionSelected\\\">\\n    <div class=\\\"row\\\">\\n    <mat-toolbar role=\\\"toolbar\\\" color=\\\"primary\\\">\\n      <mat-toolbar-row>\\n        Billing Information for {{connection.meterLocation}}\\n      </mat-toolbar-row>\\n    </mat-toolbar>\\n    <form [formGroup]=\\\"billingFormGroup\\\" class=\\\"billing-form\\\" (ngSubmit)=\\\"submitReadings()\\\">\\n      <table class=\\\"billing-form-table\\\">\\n        <tr>\\n        <td>\\n          <label class=\\\"col-sm-2 control-label\\\" for=\\\"previousReading\\\">  <mat-label>Previous reading</mat-label></label>\\n        </td>\\n        <td>\\n          <mat-form-field appearance=\\\"outline\\\">\\n            <input matInput id=\\\"previousReading\\\" placeholder=\\\"Meter serial number\\\" formControlName=\\\"previousReading\\\">\\n            <mat-error *ngIf=\\\"previousReading.invalid && previousReading.touched\\\">\\n              The previous reading is required\\n            </mat-error>\\n          </mat-form-field>\\n        </td>\\n        <td></td>\\n      </tr>\\n        <tr>\\n          <td>\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"currentReading\\\">  <mat-label>Current reading</mat-label></label>\\n          </td>\\n          <td>\\n            <mat-form-field appearance=\\\"outline\\\">\\n              <input matInput id=\\\"currentReading\\\" placeholder=\\\"Meter serial number\\\" formControlName=\\\"currentReading\\\">\\n              <mat-error *ngIf=\\\"currentReading.invalid && currentReading.touched\\\">\\n                The current reading is required\\n              </mat-error>\\n            </mat-form-field>\\n          </td>\\n          <td>\\n            <button type=\\\"button\\\" class=\\\"submit-btn\\\" mat-raised-button color=\\\"accent\\\" [disabled]=\\\"billingFormGroup.invalid\\\" type=\\\"submit\\\">Submit</button>\\n          </td>\\n        </tr>\\n      </table>\\n    </form>\\n  </div>\\n    <div class=\\\"row\\\">\\n      <mat-toolbar role=\\\"toolbar\\\" color=\\\"primary\\\">\\n        <mat-toolbar-row>\\n          Previous Bills\\n        </mat-toolbar-row>\\n      </mat-toolbar>\\n    </div>\\n</div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {debounceTime, distinctUntilChanged, map, startWith, switchMap} from 'rxjs/operators';\nimport {BillingService} from '../services/billing.service';\nimport {Connection} from '../model/connection';\nimport {CustomerService} from '../services/customer.service';\n\n@Component({\n  selector: 'app-bills',\n  templateUrl: './bills.component.html',\n  styleUrls: ['./bills.component.css']\n})\nexport class BillsComponent implements OnInit {\n  customerQueryField: FormControl = new FormControl();\n  customerConnections: any[] = [];\n  connection: Connection;\n  connectionSelected: boolean;\n  recentConnectionReading: number;\n\n  //form state\n  loading = false;\n  success = false;\n\n  billingFormGroup: FormGroup;\n\n  constructor(private fb: FormBuilder, private customerService: CustomerService, private billingService: BillingService) { }\n\n  ngOnInit() {\n    this.customerQueryField.valueChanges.pipe(\n      debounceTime(3000),\n      distinctUntilChanged(),\n      switchMap((query) => this.customerService.searchCustomer(query))).subscribe(res => {\n      res['content'].forEach(item => {\n        this.customerConnections = item.connections;\n\n      });\n    });\n\n    this.billingFormGroup = this.fb.group({\n        previousReading: [,Validators.required],\n        currentReading: [,Validators.required]\n    });\n  }\n\n  get previousReading(){\n    return this.billingFormGroup.get(\"previousReading\");\n  }\n\n  get currentReading(){\n    return this.billingFormGroup.get(\"currentReading\");\n  }\n\n  onSelect(connection: Connection): void {\n    this.connection = connection;\n    this.connectionSelected = true;\n  }\n\n  submitReadings() {\n    this.loading = true;\n    const billingData = this.billingFormGroup.value;\n\n    console.log(\"Connection reading\" + billingData);\n    try {\n      //submit form\n      this.billingService.save(this.connection.id,billingData);\n      this.success = true;\n    }catch (e) {\n      console.log(e)\n    }\n\n    this.loading = false;\n  }\n}\n","module.exports = \".search-control > input,\\n.search-control > button {\\n  font-size: 1.2rem;\\n}\\n\\n.search-control > input{\\n  width: 50%;\\n}\\n\\n.filter-wrapper,\\n.keyword-wrapper {\\n  display: flex;\\n  margin: 20px 20px 20px 0px;\\n}\\n\\n.filter-wrapper {\\n  min-height: 100%;\\n  flex-flow: column wrap;;\\n  position: relative\\n}\\n\\n.keyword-wrapper {\\n  width: 100%;\\n  position: relative;\\n}\\n\\n#keyword {\\n  border: 1px solid #ccc;\\n  padding: 10px;\\n  font: 1.5em 'Arimo', sans-serif;\\n  width: 50%;\\n  outline: none;\\n  transition: border 0.5s ease-in-out\\n}\\n\\n#keyword:focus {\\n  border-color : rgba(81, 203, 238, 1);;\\n}\\n\\n#keyword-button {\\n  position: absolute;\\n  right: 26%;\\n  top: 50%;\\n  -webkit-transform: translateY(-50%);\\n          transform: translateY(-50%);\\n  font-size: 1.7em;\\n  color: #8DB9ED\\n}\\n\\n#keyword-button:hover {\\n  color: #ccc\\n}\\n\\n.filter-select {\\n  width: 20%;\\n  list-style: square;\\n  font-size: 1.1em;\\n  color: rgb(105, 105, 105);\\n  border: 1px solid #ccc;\\n  border-top: none;\\n  top: calc(50% + 25px);\\n  overflow-y: auto;\\n  background: #fff;\\n  margin: 2px 20px 20px 0px;\\n}\\n\\n.tags {\\n  font-size: 12px;\\n  font-style: italic;\\n  color: #c6c6c6;\\n  margin-right: 10px;\\n  position: relative;\\n  top: -10px;\\n}\\n\\n.filter-select-list:hover .tags {\\n  color: #fff;\\n}\\n\\n.filter-select-list {\\n  cursor: pointer;\\n  padding: 5px 10px;\\n}\\n\\n.customer-name {\\n  display: inline-block;\\n  position: absolute;\\n}\\n\\n.filter-select-list:hover {\\n  background:  #C0C0C0;\\n  color: #fff\\n}\\n\\n.list-highlight,\\n.list-highlight:hover {\\n  background: rgb(55, 55, 55);\\n  color: #fff\\n}\\n\\n\"","module.exports = \"<section class=\\\"filter-wrapper\\\">\\n  <div class=\\\"keyword-wrapper\\\">\\n    <input type=\\\"text\\\" [formControl]=\\\"customerQueryField\\\" id=\\\"keyword\\\" placeholder=\\\"search for a customer...\\\" autofocus />\\n  </div>\\n</section>\\n\\n<form [formGroup]=\\\"connectionsFormGroup\\\" (ngSubmit)=\\\"submitConnectionHandler()\\\">\\n\\n  <mat-form-field style=\\\"width: 30%\\\">\\n    <mat-select placeholder=\\\"Choose customer\\\" formControlName=\\\"customerId\\\">\\n      <mat-option *ngFor=\\\"let customer of customerResults\\\" [value]=\\\"customer.id\\\">\\n        {{customer.firstName}} {{customer.middleName}} {{customer.surname}}\\n      </mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n\\n<table>\\n  <tr>\\n    <td>\\n      <label class=\\\"col-sm-2 control-label\\\" for=\\\"meterSerialNumber\\\">  <mat-label>Meter Serial number</mat-label></label>\\n    </td>\\n    <td>\\n      <mat-form-field appearance=\\\"outline\\\">\\n        <input matInput id=\\\"meterSerialNumber\\\" placeholder=\\\"Meter serial number\\\" formControlName=\\\"meterSerialNumber\\\">\\n        <mat-error *ngIf=\\\"meterSerialNumber.invalid && meterSerialNumber.touched\\\">\\n          The meter serial number is required\\n        </mat-error>\\n      </mat-form-field>\\n    </td>\\n    <td></td>\\n\\n  </tr>\\n\\n  <tr>\\n    <td>\\n      <label class=\\\"col-sm-2 control-label\\\" for=\\\"meterLocation\\\">  <mat-label>Meter location</mat-label></label>\\n    </td>\\n    <td colspan=\\\"2\\\">\\n      <mat-form-field  class=\\\"full-width-input\\\" >\\n        <textarea matInput placeholder=\\\"Meter location\\\" formControlName=\\\"meterLocation\\\" id=\\\"meterLocation\\\"></textarea>\\n        <mat-error *ngIf=\\\"meterLocation.invalid && meterLocation.touched\\\">\\n          The meter location is required\\n        </mat-error>\\n      </mat-form-field>\\n\\n    </td>\\n  </tr>\\n<tr>\\n  <td colspan=\\\"2\\\">\\n    <div>\\n      <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"connectionsFormGroup.invalid\\\" type=\\\"submit\\\">Submit</button>\\n    </div>\\n  </td>\\n</tr>\\n\\n</table>\\n\\n\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport { HttpClient} from '@angular/common/http';\nimport { debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators';\nimport {Connection} from '../../model/connection';\nimport { ConnectionService } from '../../services/connection.service';\nimport { CustomerService } from '../../services/customer.service';\n\n@Component({\n  selector: 'app-connection',\n  templateUrl: './connection.component.html',\n  styleUrls: ['./connection.component.css']\n})\nexport class ConnectionComponent implements OnInit {\n\n  connectionsFormGroup: FormGroup;\n  customerQueryField: FormControl = new FormControl();\n  customerResults: any[] = [];\n\n  //form state\n  loading = false;\n  success = false;\n\n  constructor(private _formBuilder: FormBuilder, private connectionService: ConnectionService,private customerService: CustomerService) {\n  }\n\n  ngOnInit() {\n    this.connectionsFormGroup = this._formBuilder.group({\n      meterSerialNumber: ['', Validators.required],\n      meterLocation: ['', Validators.required],\n      customerId: ['', Validators.required]\n    });\n\n    this.customerQueryField.valueChanges.pipe(\n       debounceTime(1000),\n       distinctUntilChanged(),\n       switchMap((query) => this.customerService.searchCustomer(query))).subscribe(res => {\n           res['content'].forEach(item => {\n             this.customerResults.push(item)\n           });\n       });\n  }\n\n  get meterSerialNumber(){\n    return this.connectionsFormGroup.get(\"meterSerialNumber\");\n  }\n\n  get meterLocation(){\n    return this.connectionsFormGroup.get(\"meterLocation\");\n  }\n\n  get customerId(){\n    return this.connectionsFormGroup.get(\"customerId\");\n  }\n\n  async submitConnectionHandler() {\n    this.loading = true;\n    const connectionData = this.connectionsFormGroup.value;\n    const connections : Connection[] = [];\n    connections.push(connectionData);\n    try {\n      //submit form\n      this.customerService.connect(this.customerId.value,connections);\n      this.success = true;\n    }catch (e) {\n      console.log(e)\n    }\n\n    this.loading = false;\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"connection\\\">\\n\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Search connection\\\" #input>\\n  </mat-form-field>\\n\\n  <div class=\\\"spinner-container\\\" *ngIf=\\\"dataSource.loading$ | async\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n\\n  <mat-table class=\\\"lessons-table mat-elevation-z8\\\" [dataSource]=\\\"dataSource\\\"\\n             matSort matSortActive=\\\"seqNo\\\" matSortDirection=\\\"asc\\\" matSortDisableClear>\\n\\n    <ng-container matColumnDef=\\\"meterSerialNumber\\\">\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Meter serial Number</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let connection\\\">{{connection.meterSerialNumber}}</mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"meterLocation\\\">\\n      <mat-header-cell *matHeaderCellDef>Meter Location</mat-header-cell>\\n      <mat-cell class=\\\"description-cell\\\"\\n                *matCellDef=\\\"let connection\\\">{{connection.meterLocation}}\\n      </mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"connectionCode\\\">\\n      <mat-header-cell *matHeaderCellDef>Connection code</mat-header-cell>\\n      <mat-cell class=\\\"duration-cell\\\"\\n                *matCellDef=\\\"let connection\\\">{{connection.connectionCode}}\\n      </mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <mat-header-cell *matHeaderCellDef>Status</mat-header-cell>\\n      <mat-cell class=\\\"duration-cell\\\"\\n                *matCellDef=\\\"let connection\\\">{{connection.status}}\\n      </mat-cell>\\n    </ng-container>\\n\\n\\n    <ng-container matColumnDef=\\\"customer\\\">\\n      <mat-header-cell *matHeaderCellDef>Owner</mat-header-cell>\\n      <mat-cell class=\\\"duration-cell\\\"\\n                *matCellDef=\\\"let connection\\\">{{connection.customer.firstName}}\\n      </mat-cell>\\n    </ng-container>\\n\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></mat-row>\\n\\n  </mat-table>\\n\\n  <!--todo change [length]=\\\"10\\\" to a dynamic value-->\\n  <mat-paginator [length]=\\\"10\\\" [pageSize]=\\\"10\\\"\\n                 [pageSizeOptions]=\\\"[3, 5, 10]\\\"></mat-paginator>\\n\\n\\n</div>\\n\"","import {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {MatPaginator, MatSort} from '@angular/material';\nimport {ActivatedRoute} from '@angular/router';\nimport {of} from 'rxjs/index';\nimport {BehaviorSubject} from 'rxjs/internal/BehaviorSubject';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {fromEvent} from 'rxjs/internal/observable/fromEvent';\nimport {merge} from 'rxjs/internal/observable/merge';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, tap} from 'rxjs/operators';\nimport {Connection} from '../../model/connection';\nimport {ConnectionService} from '../../services/connection.service';\n\n@Component({\n  selector: 'app-connections-list',\n  templateUrl: './connections-list.component.html',\n  styleUrls: ['./connections-list.component.css']\n})\nexport class ConnectionsListComponent implements OnInit, AfterViewInit {\n\n  connection: Connection;\n  dataSource: ConnectionDataSource;\n  totalCustomers: number = 0;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild('input') input: ElementRef;\n\n  displayedColumns = ['meterSerialNumber', 'meterLocation', 'connectionCode', 'status', 'customer'];\n\n  constructor(private route: ActivatedRoute, private _connectionService: ConnectionService) { }\n\n  ngOnInit() {\n    this.connection = this.route.snapshot.data[\"connection\"];\n    this.dataSource = new ConnectionDataSource(this._connectionService);\n    this.dataSource.loadConnections('', 'asc', 0, 3);\n  }\n\n  ngAfterViewInit(): void {\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    fromEvent(this.input.nativeElement,'keyup')\n      .pipe(\n        debounceTime(150),\n        distinctUntilChanged(),\n        tap(() => {\n          this.paginator.pageIndex = 0;\n\n          this.loadConnectionsPage();\n        })\n      )\n      .subscribe();\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        tap(() => this.loadConnectionsPage())\n      )\n      .subscribe();\n  }\n\n  loadConnectionsPage() {\n    this.dataSource.loadConnections(\n      this.input.nativeElement.value,\n      this.sort.direction,\n      this.paginator.pageIndex,\n      this.paginator.pageSize);\n  }\n\n}\n\nexport class ConnectionDataSource implements DataSource<Connection> {\n\n  private connectionSubject = new BehaviorSubject<Connection[]>([]);\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n  public loading$ = this.loadingSubject.asObservable();\n\n  constructor(private connectionService: ConnectionService) {}\n\n  loadConnections(filter:string,\n                sortDirection:string,\n                pageIndex:number,\n                pageSize:number) {\n\n    this.loadingSubject.next(true);\n\n    this.connectionService.getConnections(filter, sortDirection,\n      pageIndex, pageSize).pipe(\n      catchError(() => of([])),\n      finalize(() => this.loadingSubject.next(false))\n    ).subscribe(\n      connections => this.connectionSubject.next(connections[\"content\"])\n    );\n\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<Connection[]> {\n    console.log(\"Connecting data source\");\n    return this.connectionSubject.asObservable();\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {\n    this.connectionSubject.complete();\n    this.loadingSubject.complete();\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<mat-toolbar>\\n  <mat-toolbar-row>\\n    <button mat-icon-button (click)=\\\"addConnection()\\\">\\n      <mat-icon class=\\\"glyphicon-plus\\\">add</mat-icon>\\n      Create connection\\n    </button>\\n  </mat-toolbar-row>\\n</mat-toolbar>\\n<router-outlet></router-outlet>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n  selector: 'app-connections',\n  templateUrl: './connections.component.html',\n  styleUrls: ['./connections.component.css']\n})\nexport class ConnectionsComponent implements OnInit {\n\n  constructor(private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit() {\n  }\n\n  addConnection() {\n    this.router.navigate(['add-connection'],{relativeTo: this.route})\n  }\n}\n","import {NgModule} from \"@angular/core\";\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonModule,\n  MatNativeDateModule,\n  MatIconModule,\n  MatSidenavModule,\n  MatListModule,\n  MatToolbarModule,MatSortModule,MatStepperModule,MatSelectModule,MatAutocompleteModule,\n  MatMenuModule, MatGridListModule, MatCardModule,MatFormFieldModule,MatInputModule,MatTableModule,MatPaginatorModule,MatProgressSpinnerModule\n} from '@angular/material';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule,MatToolbarModule, MatNativeDateModule, MatIconModule, MatSidenavModule, MatListModule,MatMenuModule,\n    MatGridListModule,MatCardModule,MatFormFieldModule,MatInputModule,MatTableModule,MatPaginatorModule,MatProgressSpinnerModule,MatSortModule,\n    MatStepperModule,MatSelectModule,MatAutocompleteModule\n  ],\n  exports: [CommonModule, MatButtonModule, MatToolbarModule, MatNativeDateModule, MatIconModule, MatSidenavModule, MatListModule,MatMenuModule,\n    MatGridListModule,MatCardModule,MatFormFieldModule,MatInputModule,MatTableModule,MatPaginatorModule,MatProgressSpinnerModule,MatSortModule,\n    MatStepperModule,MatSelectModule,MatAutocompleteModule\n  ],\n})\nexport class CustomMaterialModule { }\n","module.exports = \"table td {\\n  text-align: left;\\n  padding-left: 20px;\\n  font-weight: 700;\\n  margin: auto;\\n}\\n\\ntable tr {\\n  border-top: 2px solid rgba(109, 176, 231, 0.8);\\n  transition: background 0.6s, color 0.6s;\\n}\\n\\n.next-button{\\n  float: right;\\n}\\n\\n.full-width-input{\\n  width: 100%;\\n}\\n\"","module.exports = \"<form [formGroup]=\\\"customerFormGroup\\\" (ngSubmit)=\\\"submitCustomerConnectionHandler()\\\">\\n<mat-horizontal-stepper [linear]=\\\"isLinear\\\" #stepper>\\n  <mat-step [stepControl]=\\\"customerFormGroup\\\">\\n\\n      <ng-template matStepLabel>Fill out your name</ng-template>\\n      <table>\\n        <tr>\\n          <td>\\n            <label class=\\\"col-lg-2 control-label\\\" for=\\\"firstName\\\"> <mat-label>First Name</mat-label></label>\\n          </td>\\n          <td>\\n            <mat-form-field appearance=\\\"outline\\\">\\n            <input matInput id=\\\"firstName\\\" placeholder=\\\"First Name\\\" formControlName=\\\"firstName\\\">\\n            <mat-error *ngIf=\\\"firstName.invalid && firstName.touched\\\">\\n              The first name looks invalid (Only alphabets allowed)\\n            </mat-error>\\n          </mat-form-field></td>\\n          <td>\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"middleName\\\">   <mat-label>Middle name</mat-label></label>\\n          </td>\\n          <td>\\n            <mat-form-field appearance=\\\"outline\\\">\\n              <input matInput id=\\\"middleName\\\" placeholder=\\\"Middle name\\\" formControlName=\\\"middleName\\\">\\n              <mat-error *ngIf=\\\"middleName.invalid && middleName.touched\\\">\\n                The middle name looks invalid (Only alphabets allowed)\\n              </mat-error>\\n            </mat-form-field>\\n\\n          </td>\\n        </tr>\\n\\n        <tr>\\n          <td>\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"surname\\\">  <mat-label>Surname</mat-label></label>\\n          </td>\\n          <td>\\n            <mat-form-field appearance=\\\"outline\\\">\\n              <input matInput id=\\\"surname\\\" placeholder=\\\"Surname\\\" formControlName=\\\"surname\\\">\\n              <mat-error *ngIf=\\\"surname.invalid  && surname.touched\\\">\\n                The surname looks invalid (Only alphabets allowed)\\n              </mat-error>\\n            </mat-form-field>\\n          </td>\\n\\n          <td>\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"idNumber\\\"> <mat-label>ID Number</mat-label></label>\\n          </td>\\n          <td>\\n            <mat-form-field appearance=\\\"outline\\\">\\n              <mat-label>National ID Number</mat-label>\\n              <input matInput id=\\\"idNumber\\\" placeholder=\\\"National ID Number\\\" formControlName=\\\"idNumber\\\">\\n              <mat-error *ngIf=\\\"idNumber.invalid && idNumber.touched\\\">\\n                The National ID looks invalid (Only numbers allowed)\\n              </mat-error>\\n            </mat-form-field>\\n          </td>\\n        </tr>\\n\\n        <tr>\\n          <td>\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"email\\\">  <mat-label>Email address</mat-label></label>\\n          </td>\\n          <td colspan=\\\"3\\\">\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"full-width-input\\\">\\n              <input matInput id=\\\"email\\\" placeholder=\\\"Email address\\\" formControlName=\\\"email\\\">\\n              <mat-error *ngIf=\\\"email.invalid && email.touched\\\">\\n                The email address is invalid\\n              </mat-error>\\n            </mat-form-field>\\n          </td>\\n        </tr>\\n\\n        <tr>\\n          <td>\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"number\\\"> <mat-label>Phone Number</mat-label></label>\\n          </td>\\n          <td>\\n            <div formArrayName=\\\"phoneNumbers\\\">\\n              <div *ngFor=\\\"let number of formPhoneNumbers.controls; let i=index;\\\" [formGroupName]=\\\"i\\\">\\n                <mat-form-field>\\n                  <input matInput id=\\\"number\\\" placeholder=\\\"Phone Number\\\" formControlName=\\\"number\\\">\\n                  <mat-error *ngIf=\\\"number.invalid && number.touched\\\">\\n                    The phone number is invalid <br />\\n                    - should start with a 7\\n                    - should contain 9 digits\\n                  </mat-error>\\n                </mat-form-field>\\n\\n                <button mat-raised-button color=\\\"warn\\\" (click)=\\\"deleteFormPhoneNumber(i)\\\"> Delete Phone number\\n                  <mat-icon aria-label=\\\"add phone number icon\\\">delete</mat-icon>\\n                </button>\\n              </div>\\n            </div>\\n\\n            <button type=\\\"button\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"addPhoneNumber()\\\"> Add Phone number\\n              <mat-icon aria-label=\\\"add phone number icon\\\">add</mat-icon>\\n            </button>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td colspan=\\\"4\\\">\\n            <div  class=\\\"next-button btn-primary\\\">\\n              <button type=\\\"button\\\" mat-button matStepperNext >Next</button>\\n            </div>\\n          </td>\\n        </tr>\\n      </table>\\n  </mat-step>\\n  <mat-step [stepControl]=\\\"connectionsFormGroup\\\">\\n      <ng-template matStepLabel>Fill out Connection details</ng-template>\\n\\n      <table>\\n        <tr>\\n          <td>\\n            <label class=\\\"col-sm-2 control-label\\\" for=\\\"number\\\"> <mat-label>New Connection</mat-label></label>\\n          </td>\\n          <td>\\n            <div formArrayName=\\\"connections\\\">\\n              <div *ngFor=\\\"let connection of formConnections.controls; let i=index;\\\" [formGroupName]=\\\"i\\\">\\n                <mat-form-field>\\n                  <input matInput id=\\\"meterSerialNumber\\\" placeholder=\\\"Meter serial number\\\" formControlName=\\\"meterSerialNumber\\\">\\n\\n                </mat-form-field>\\n\\n                <mat-form-field appearance=\\\"outline\\\">\\n                  <textarea matInput placeholder=\\\"Meter location\\\" formControlName=\\\"meterLocation\\\" id=\\\"meterLocation\\\"></textarea>\\n                </mat-form-field>\\n\\n                <button mat-raised-button color=\\\"warn\\\" (click)=\\\"deleteFormConnection(i)\\\"> Delete Connection\\n                  <mat-icon aria-label=\\\"add connection icon\\\">delete</mat-icon>\\n                </button>\\n              </div>\\n            </div>\\n\\n            <button type=\\\"button\\\" mat-raised-button color=\\\"primary\\\" (click)=\\\"addConnection()\\\"> Add Connection\\n              <mat-icon aria-label=\\\"add connection icon\\\">add</mat-icon>\\n            </button>\\n          </td>\\n\\n        </tr>\\n        <tr>\\n        <td>\\n            <div>\\n              <button type=\\\"button\\\" mat-button matStepperPrevious>Back</button>\\n              <button type=\\\"button\\\" mat-button matStepperNext >Next</button>\\n            </div>\\n\\n          </td>\\n        </tr>\\n      </table>\\n\\n\\n  </mat-step>\\n  <mat-step>\\n    <ng-template matStepLabel>Done</ng-template>\\n    <div>\\n      <button type=\\\"button\\\" mat-button matStepperPrevious>Back</button>\\n      <button type=\\\"button\\\" class=\\\"submit-btn\\\" mat-raised-button color=\\\"accent\\\" [disabled]=\\\"customerFormGroup.invalid\\\" type=\\\"submit\\\">Submit</button>\\n      <!--<button mat-button (click)=\\\"stepper.reset()\\\">Reset</button>-->\\n    </div>\\n  </mat-step>\\n</mat-horizontal-stepper>   </form>\\n\"","import {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport {FormArray, FormBuilder, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-customer-stepper',\n  templateUrl: './customer-stepper.component.html',\n  styleUrls: ['./customer-stepper.component.css']\n})\nexport class CustomerStepperComponent implements OnInit {\n  isLinear = false;\n  customerFormGroup: FormGroup;\n  connectionsFormGroup: FormGroup;\n\n  //form state\n  loading = false;\n  success = false;\n\n  private url = 'http://localhost:5000/customers';\n  headers = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private fb: FormBuilder,private http: HttpClient) {}\n\n  ngOnInit() {\n    this.customerFormGroup = this.fb.group({\n      firstName: ['', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\n      middleName: ['', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\n      surname: ['', [Validators.required, Validators.pattern('[a-zA-Z ]*')]],\n      idNumber: ['', [Validators.required, Validators.pattern('[0-9]*')]],\n      email: ['', [Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')]],\n      phoneNumbers: this.fb.array([]),\n      connections: this.fb.array([])\n    });\n\n    this.connectionsFormGroup = this.fb.group({\n\n    });\n\n    this.connectionsFormGroup.valueChanges.subscribe(console.log);\n  }\n\n  //Customer form controls\n  get firstName(){\n    return this.customerFormGroup.get(\"firstName\");\n  }\n\n  get middleName(){\n    return this.customerFormGroup.get(\"middleName\");\n  }\n\n  get surname(){\n    return this.customerFormGroup.get(\"surname\");\n  }\n\n  get idNumber(){\n    return this.customerFormGroup.get(\"idNumber\");\n  }\n\n  get email(){\n    return this.customerFormGroup.get(\"email\");\n  }\n  get formPhoneNumbers(){\n    return this.customerFormGroup.get(\"phoneNumbers\") as FormArray\n  }\n\n  addPhoneNumber() {\n    const phoneNumber = this.fb.group({\n      number: ['',\n        [Validators.required,\n          Validators.pattern('^254+[0-9]*'),\n          Validators.minLength(12),\n          Validators.maxLength(12)]\n      ],\n    });\n\n    this.formPhoneNumbers.push(phoneNumber);\n  }\n\n  deleteFormPhoneNumber(i){\n    this.formPhoneNumbers.removeAt(i);\n  }\n\n//Connection form controls\n  get formConnections(){\n    return this.customerFormGroup.get(\"connections\") as FormArray\n  }\n\n  addConnection() {\n    const connection = this.fb.group({\n      meterSerialNumber: ['', Validators.required],\n      meterLocation: ['', Validators.required]\n    });\n\n    this.formConnections.push(connection);\n  }\n\n  deleteFormConnection(i){\n    this.formConnections.removeAt(i);\n  }\n\n  async submitCustomerConnectionHandler() {\n    this.loading = true;\n    const customerData = this.customerFormGroup.value;\n    console.log(\"Customer data\" + customerData);\n\n    try {\n      //submit form\n      this.http.post(this.url, JSON.stringify(customerData),this.headers)\n        .subscribe(response => {\n          console.log(response);\n        },(err: HttpErrorResponse) => {\n          console.log(err);\n        });\n      this.success = true;\n    }catch (e) {\n      console.log(e)\n    }\n\n    this.loading = false;\n  }\n}\n\n","module.exports = \"\"","module.exports = \"<div class=\\\"customer\\\">\\n\\n  <mat-form-field>\\n    <input matInput placeholder=\\\"Search customer\\\" #input>\\n  </mat-form-field>\\n\\n  <div class=\\\"spinner-container\\\" *ngIf=\\\"dataSource.loading$ | async\\\">\\n    <mat-spinner></mat-spinner>\\n  </div>\\n\\n  <mat-table class=\\\"lessons-table mat-elevation-z8\\\" [dataSource]=\\\"dataSource\\\"\\n             matSort matSortActive=\\\"seqNo\\\" matSortDirection=\\\"asc\\\" matSortDisableClear>\\n\\n    <ng-container matColumnDef=\\\"firstName\\\">\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>First Name</mat-header-cell>\\n      <mat-cell *matCellDef=\\\"let customer\\\">{{customer.firstName}}</mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"middleName\\\">\\n      <mat-header-cell *matHeaderCellDef>Middle Name</mat-header-cell>\\n      <mat-cell class=\\\"description-cell\\\"\\n                *matCellDef=\\\"let customer\\\">{{customer.middleName}}\\n      </mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"surname\\\">\\n      <mat-header-cell *matHeaderCellDef>Surname</mat-header-cell>\\n      <mat-cell class=\\\"duration-cell\\\"\\n                *matCellDef=\\\"let customer\\\">{{customer.surname}}\\n      </mat-cell>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"idNumber\\\">\\n      <mat-header-cell *matHeaderCellDef>ID Number</mat-header-cell>\\n      <mat-cell class=\\\"duration-cell\\\"\\n                *matCellDef=\\\"let customer\\\">{{customer.idNumber}}\\n      </mat-cell>\\n    </ng-container>\\n\\n\\n    <ng-container matColumnDef=\\\"email\\\">\\n      <mat-header-cell *matHeaderCellDef>Email</mat-header-cell>\\n      <mat-cell class=\\\"duration-cell\\\"\\n                *matCellDef=\\\"let customer\\\">{{customer.email}}\\n      </mat-cell>\\n    </ng-container>\\n\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"></mat-row>\\n\\n  </mat-table>\\n\\n  <!--todo change [length]=\\\"10\\\" to a dynamic value-->\\n  <mat-paginator [length]=\\\"10\\\" [pageSize]=\\\"10\\\"\\n                 [pageSizeOptions]=\\\"[3, 5, 10]\\\"></mat-paginator>\\n\\n\\n</div>\\n\"","import { CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport { MatPaginator, MatSort} from '@angular/material';\nimport {ActivatedRoute} from '@angular/router';\nimport { of } from 'rxjs';\nimport { BehaviorSubject} from 'rxjs/internal/BehaviorSubject';\nimport { Observable} from 'rxjs/internal/Observable';\nimport {fromEvent} from 'rxjs/internal/observable/fromEvent';\nimport {merge} from 'rxjs/internal/observable/merge';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, tap} from 'rxjs/operators';\nimport { Customer} from '../../model/customer';\nimport { CustomerService} from '../../services/customer.service';\n\n@Component({\n  selector: 'app-customers-list',\n  templateUrl: './customers-list.component.html',\n  styleUrls: ['./customers-list.component.css']\n})\nexport class CustomersListComponent implements OnInit, AfterViewInit {\n\n  customer: Customer;\n  dataSource: CustomerDataSource;\n  totalCustomers: number = 0;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild('input') input: ElementRef;\n\n  displayedColumns = ['firstName', 'middleName', 'surname', 'idNumber', 'email'];\n\n  constructor(private route: ActivatedRoute, private _customerService: CustomerService) {\n  }\n\n  ngOnInit() {\n    this.customer = this.route.snapshot.data[\"customer\"];\n    this.dataSource = new CustomerDataSource(this._customerService);\n    this.dataSource.loadCustomers('', 'asc', 0, 3);\n  }\n\n  ngAfterViewInit() {\n\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n\n    fromEvent(this.input.nativeElement,'keyup')\n      .pipe(\n        debounceTime(150),\n        distinctUntilChanged(),\n        tap(() => {\n          this.paginator.pageIndex = 0;\n\n          this.loadCustomersPage();\n        })\n      )\n      .subscribe();\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        tap(() => this.loadCustomersPage())\n      )\n      .subscribe();\n\n  }\n\n  loadCustomersPage() {\n    this.dataSource.loadCustomers(\n      this.input.nativeElement.value,\n      this.sort.direction,\n      this.paginator.pageIndex,\n      this.paginator.pageSize);\n  }\n\n}\n\nexport class CustomerDataSource implements DataSource<Customer> {\n\n  private customerSubject = new BehaviorSubject<Customer[]>([]);\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n  public loading$ = this.loadingSubject.asObservable();\n\n  constructor(private _customerService: CustomerService) {}\n\n  loadCustomers(filter:string,\n              sortDirection:string,\n              pageIndex:number,\n              pageSize:number) {\n\n    this.loadingSubject.next(true);\n\n    this._customerService.findCustomers(filter, sortDirection,\n      pageIndex, pageSize).pipe(\n      catchError(() => of([])),\n      finalize(() => this.loadingSubject.next(false))\n    ).subscribe(\n        customers => this.customerSubject.next(customers[\"content\"])\n    );\n\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<Customer[]> {\n    console.log(\"Connecting data source\");\n    return this.customerSubject.asObservable();\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void {\n    this.customerSubject.complete();\n    this.loadingSubject.complete();\n  }\n\n}\n\n\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"currentComponentIsList\\\">\\n<mat-toolbar>\\n  <mat-toolbar-row>\\n    <button mat-icon-button (click)=\\\"addCustomer()\\\">\\n      <mat-icon class=\\\"glyphicon-plus\\\">add</mat-icon>\\n      Add Customer\\n    </button>\\n  </mat-toolbar-row>\\n</mat-toolbar>\\n</div>\\n<router-outlet></router-outlet>\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\n\nimport {ActivatedRoute, Route, Router} from '@angular/router';\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.css']\n})\nexport class CustomersComponent implements OnInit {\n\n  componentUrl: boolean;\n  componentName: string =this.router.url;\n  constructor(private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit() {\n\n  }\n\n  currentComponentIsList() : boolean{\n    return this.componentUrl = (this.router.url == \"/customers/list\");\n  }\n\n  addCustomer() {\n      this.router.navigate(['add'],{relativeTo: this.route})\n  }\n}\n\n","module.exports = \".grid-container {\\n  margin: 20px;\\n}\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n}\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content {\\n  text-align: center;\\n}\"","module.exports = \"<div class=\\\"grid-container\\\">\\n  <h1 class=\\\"mat-h1\\\">Dashboard</h1>\\n  <mat-grid-list cols=\\\"2\\\" rowHeight=\\\"350px\\\">\\n    <mat-grid-tile *ngFor=\\\"let card of cards | async\\\" [colspan]=\\\"card.cols\\\" [rowspan]=\\\"card.rows\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>\\n            {{card.title}}\\n            <button mat-icon-button class=\\\"more-button\\\" [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Toggle menu\\\">\\n              <mat-icon>more_vert</mat-icon>\\n            </button>\\n            <mat-menu #menu=\\\"matMenu\\\" xPosition=\\\"before\\\">\\n              <button mat-menu-item>Expand</button>\\n              <button mat-menu-item>Remove</button>\\n            </mat-menu>\\n          </mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"dashboard-card-content\\\">\\n          <div>Card Content Here</div>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\"","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Breakpoints, BreakpointState, BreakpointObserver } from '@angular/cdk/layout';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  /** Based on the screen size, switch from standard to one column per row */\n  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    map(({ matches }) => {\n      if (matches) {\n        return [\n          { title: 'Card 1', cols: 1, rows: 1 },\n          { title: 'Card 2', cols: 1, rows: 1 },\n          { title: 'Card 3', cols: 1, rows: 1 },\n          { title: 'Card 4', cols: 1, rows: 1 }\n        ];\n      }\n\n      return [\n        { title: 'Card 1', cols: 2, rows: 1 },\n        { title: 'Card 2', cols: 1, rows: 1 },\n        { title: 'Card 3', cols: 1, rows: 2 },\n        { title: 'Card 4', cols: 1, rows: 1 }\n      ];\n    })\n  );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n}\n","module.exports = \".sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 200px;\\n}\\n\\n.mat-toolbar.mat-primary {\\n  position: -webkit-sticky;\\n  position: sticky;\\n  top: 0;\\n}\\n\\n.toolbar-space-filler {\\n  /* This fills the remaining space, by using flexbox.\\n     Every toolbar row uses a flexbox row layout. */\\n  flex: 1 1 auto;\\n}\\n\\n.sidenav-container{\\n  background-color: #fafafa;\\n}\\n\\n.content{\\n  margin: 10px;\\n}\\n\\n.submit-button-holder{\\n  flex: 1 1 auto;\\n}\\n\"","module.exports = \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\n  <mat-sidenav\\n    #drawer\\n    class=\\\"sidenav\\\"\\n    fixedInViewport=\\\"true\\\"\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\n    [opened]=\\\"!(isHandset$ | async)\\\">\\n    <!--show dashboard when this button is clicked-->\\n    <mat-toolbar color=\\\"primary\\\">\\n      <button type=\\\"button\\\" aria-label=\\\"Toggle side nav\\\" mat-icon-button color=\\\"secondary\\\" (click)=\\\"showDashbord()\\\">\\n        <h5 class=\\\"title\\\">{{title}} <mat-icon aria-label=\\\"Side nav toggle icon\\\">home</mat-icon> </h5>\\n      </button>\\n    </mat-toolbar>\\n    <mat-nav-list>\\n      <a mat-list-item routerLink=\\\"/customers\\\">Customers</a>\\n      <a mat-list-item routerLink=\\\"/connections\\\">Connections</a>\\n      <a mat-list-item routerLink=\\\"/bills\\\">Readings & Bills</a>\\n      <a mat-list-item routerLink=\\\"/reports\\\">Reports</a>\\n      <a mat-list-item routerLink=\\\"/users\\\">Users and Accounts</a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content>\\n    <mat-toolbar role=\\\"toolbar\\\" color=\\\"primary\\\">\\n      <mat-toolbar-row>\\n        <button type=\\\"button\\\" aria-label=\\\"Toggle side nav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\" color=\\\"secondary\\\">\\n          <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n        </button>\\n        <span class=\\\"toolbar-space-filler\\\"></span>\\n        <span>\\n          <mat-menu #appMenu=\\\"matMenu\\\">\\n            <button mat-menu-item>Settings</button>\\n            <button mat-menu-item>Help & About</button>\\n            <button mat-menu-item>Logout</button>\\n          </mat-menu>\\n          <button mat-icon-button [matMenuTriggerFor]=\\\"appMenu\\\">\\n            <mat-icon>more_vert</mat-icon>\\n          </button>\\n        </span>\\n      </mat-toolbar-row>\\n    </mat-toolbar>\\n    <div class=\\\"content\\\">\\n    <router-outlet></router-outlet>\\n    </div>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\\n\\n\"","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\nimport {Router} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css']\n})\nexport class NavigationComponent {\n  title = \"Wamis 1.0\";\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches)\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver, private router: Router) {}\n\n  showDashbord() {\n    this.router.navigate([''])\n  }\n}\n","module.exports = \"\"","module.exports = \"<p>\\n  reports works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-reports',\n  templateUrl: './reports.component.html',\n  styleUrls: ['./reports.component.css']\n})\nexport class ReportsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {Reading} from '../model/Reading';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BillingService {\n  private connectionUrl = \"http://localhost:5000/connections\";\n  headers = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient) { }\n\n  save(connectionId: number,billingData: Reading, ) {\n    this.http.post(this.connectionUrl+\"/\"+connectionId+\"/bill\", JSON.stringify(billingData),this.headers)\n      .subscribe(response => {\n        console.log(response);\n      },(err: HttpErrorResponse) => {\n        console.log(err);\n      });\n  }\n}\n","import {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {Connection} from '../model/connection';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionService {\n\n  private connectionUrl = \"http://localhost:5000/connections\";\n  headers = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient) { }\n\n  getConnections(\n    filter = '', sortOrder = 'asc',\n    pageNumber = 0, pageSize = 3):  Observable<Connection[]> {\n\n    return this.http.get<Connection[]>(this.connectionUrl, {\n      params: new HttpParams()\n        .set('filter', filter)\n        .set('sortOrder', sortOrder)\n        .set('pageNumber', pageNumber.toString())\n        .set('pageSize', pageSize.toString())\n    });\n  }\n\n\n}\n","import {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs/internal/Observable';\nimport {map, tap} from 'rxjs/operators';\nimport {Connection} from '../model/connection';\nimport {Customer} from '../model/customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  private customerUrl = \"http://localhost:5000/customers\";\n  headers = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private http: HttpClient) { }\n\n  getCustomers(): Observable<Customer[]>{\n    return this.http.get<Customer[]>(this.customerUrl);\n  }\n\n  findCustomers(\n    filter = '', sortOrder = 'asc',\n    pageNumber = 0, pageSize = 3):  Observable<Customer[]> {\n\n    return this.http.get<Customer[]>(this.customerUrl, {\n      params: new HttpParams()\n        .set('filter', filter)\n        .set('sortOrder', sortOrder)\n        .set('pageNumber', pageNumber.toString())\n        .set('pageSize', pageSize.toString())\n    });\n  }\n\n  searchCustomer(queryString: string): Observable<Customer[]>{\n    let _URL = this.customerUrl +\"?filter=\"+ queryString;\n    return this.http.get<Customer[]>(_URL);\n  }\n\n  connect(customerId: number, connections: Connection[]){\n    this.http.post(this.customerUrl+\"/\"+customerId+\"/connect\", JSON.stringify(connections),this.headers)\n      .subscribe(response => {\n        console.log(response);\n      },(err: HttpErrorResponse) => {\n        console.log(err);\n      });\n  }\n\n  getCustomerConnections(customerId: number) {\n    let _URL = this.customerUrl +\"/\"+ customerId+\"/connections\";\n    return this.http.get<Customer[]>(_URL);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { User } from '../model/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private serviceUrl = \"https://jsonplaceholder.typicode.com/users\";\n\n  constructor(private http: HttpClient) { }\n\n  getUsers(): Observable<User[]>{\n    return this.http.get<User[]>(this.serviceUrl);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"mat-elevation-z8\\\">\\n  <table mat-table [dataSource]=\\\"userDataSource\\\">\\n\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef> Name. </th>\\n      <td mat-cell *matCellDef=\\\"let user\\\"> {{user.name}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"email\\\">\\n      <th mat-header-cell *matHeaderCellDef> Email </th>\\n      <td mat-cell *matCellDef=\\\"let user\\\"> {{user.email}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"phone\\\">\\n      <th mat-header-cell *matHeaderCellDef> Phone </th>\\n      <td mat-cell *matCellDef=\\\"let user\\\"> {{user.phone}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"company\\\">\\n      <th mat-header-cell *matHeaderCellDef> Symbol </th>\\n      <td mat-cell *matCellDef=\\\"let user\\\"> {{user.company.name}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedUserColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedUserColumns;\\\"></tr>\\n  </table>\\n</div>\\n\"","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {Customer} from '../../model/customer';\nimport { UserService } from '../../services/user.service'\nimport { Observable } from 'rxjs/internal/Observable';\nimport { DataSource } from '@angular/cdk/table';\nimport { User} from '../../model/user.model';\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  userDataSource = new UserDataSource(this.userService);\n  displayedUserColumns: string[] = ['name', 'email', 'phone', 'company'];\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n  }\n}\n\nexport class UserDataSource extends DataSource<any>{\n    constructor(private _userService: UserService){\n      super();\n    }\n\n  connect(): Observable<User[]> {\n    return this._userService.getUsers();\n  }\n\n  disconnect(){}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}